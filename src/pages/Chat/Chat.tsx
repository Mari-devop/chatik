import React, { useState, useEffect, useRef } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { dbInstance } from "../../db";
import { ChatProps } from "./types";
import { ColorRing } from "react-loader-spinner";
import {
  ChatContainer,
  PersonContainer,
  PersonBox,
  Title,
  Subtitle,
  TextBox,
  DialogContainer,
  RespondContainer,
  QuestionContainer,
  Question,
  Text,
  AnswerBox,
  Respond,
  RespondBox,
  TextRespond,
  Icon,
  Social,
  IconSocial,
  PersonShadow,
  PersonPhoto,
  IconBox,
  PersonAnswer,
  InputBox,
  Input,
  InputWrapper,
  Button,
} from "./Chat.styled";
import ModalSuccess from "../../components/ModalSuccess/ModalSuccess";
import LoadingDots from "../../components/LoadingDots/LoadingDots";
import shadow from "../../assets/images/chat/shadow.png";
import share from "../../assets/images/chat/Frame 143725072.png";
import profile from "../../assets/images/profile-user.png";

const Chat: React.FC<ChatProps> = ({ isAuthenticated }) => {
  const location = useLocation();
  const navigate = useNavigate();
  const individual = location.state;
  const {
    individualId,
    response: initialResponse,
    name,
    title,
  } = location.state;

  const [filteredResponses, setFilteredResponses] = useState<any[]>(
    location.state.filteredResponses || []
  );
  const [currentResponse, setCurrentResponse] = useState<string | null>(
    initialResponse
  );
  const [userImage, setUserImage] = useState<string>(profile);
  const [message, setMessage] = useState<string>("");
  const [isGrowing, setIsGrowing] = useState(false);
  const [showResponses, setShowResponses] = useState(true);

  const [questionVisible, setQuestionVisible] = useState(true);
  const [isDialogStarted, setIsDialogStarted] = useState(false);
  const [wasQuestionClicked, setWasQuestionClicked] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [modalType, setModalType] = useState<"success" | "failure">("success");
  const [modalMessage, setModalMessage] = useState("");
  const answerBoxRef = useRef<HTMLDivElement | null>(null);

  const handleInputClick = () => {
    if (!isAuthenticated) {
      setModalType("failure");
      setModalMessage("Please login to use this feature.");
      setShowModal(true);
    }
  };

  useEffect(() => {
    const fetchUserData = async () => {
      const users = await dbInstance.getData("users");
      const lastUser = users[users.length - 1];
      if (lastUser?.image) {
        setUserImage(lastUser.image || profile);
      }
    };
    fetchUserData();
  }, []);

  const handleShare = async (text: string, individualId: number) => {
    try {
      const individuals = await dbInstance.getData("individuals");
      const individual = individuals.find(
        (ind: any) => ind.id === individualId
      );
      const individualName = individual?.name || "Shared Response";
      const fullMessage = `${text}\n\nGenerated by ${window.location.origin}`;

      if (navigator.share) {
        const shareText = `Response from ${individualName}:\n\n${text}\n\nGenerated by ${window.location.origin}`;

        navigator
          .share({
            text: shareText,
          })
          .then(() => console.log("Successfully shared!"))
          .catch((error) => console.error("Error sharing:", error));
      } else {
        navigator.clipboard.writeText(fullMessage).then(
          () => {
            alert(`Response from ${individualName} copied to clipboard!`);
          },
          (error) => {
            console.error("Could not copy text: ", error);
          }
        );
      }
    } catch (error) {
      console.error("Error fetching individual name:", error);
    }
  };

  useEffect(() => {
    const { filteredResponses } = location.state;

    if (!filteredResponses || filteredResponses.length === 0) {
      console.warn("No filtered responses available");
    }
  }, [location.state]);

  const fetchSmallImageForResponse = async (individualId: number) => {
    const individuals = await dbInstance.getData("individuals");
    const individual = individuals.find((ind: any) => ind.id === individualId);
    return individual?.smallImage || profile;
  };

  useEffect(() => {
    const loadImagesForResponses = async () => {
      const updatedResponses = await Promise.all(
        filteredResponses.map(async (resp: any) => {
          const smallImage = await fetchSmallImageForResponse(
            resp.individualId
          );
          return { ...resp, smallImage };
        })
      );
      setFilteredResponses(updatedResponses);
    };

    if (filteredResponses.length > 0) {
      loadImagesForResponses();
    }
  }, [location.state.filteredResponses]);

  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setMessage(e.target.value);
    e.target.style.height = "auto";
    e.target.style.height = `${e.target.scrollHeight}px`;
    setIsGrowing(e.target.scrollHeight > 45);
    setQuestionVisible(false);

    if (e.target.value.trim()) {
      setShowResponses(false);
    } else {
      setShowResponses(true);
    }
  };

  const handleInputFocus = () => {
    setQuestionVisible(false);
    setShowResponses(false);
    if (individualId) {
      navigate("/chatindividuals", {
        state: {
          individualId,
          name,
          title,
          fullImage: individual?.fullImage,
          smallImage: individual?.smallImage,
        },
      });
    }
  };

  const handleQuestionClick = () => {
    setWasQuestionClicked(true);
  };

  useEffect(() => {
    if (answerBoxRef.current) {
      answerBoxRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [filteredResponses, currentResponse]);

  return (
    <>
      <ModalSuccess
        isVisible={showModal}
        modalType="failure"
        message={modalMessage}
        onClose={() => setShowModal(false)}
      />
      <ChatContainer>
        <PersonContainer>
          <PersonBox>
            <PersonShadow src={shadow} />
            <PersonPhoto src={individual?.fullImage || ""} />
            <TextBox>
              <Title>{name || individual?.name}</Title>
              <Subtitle>{title || individual?.title}</Subtitle>
            </TextBox>
          </PersonBox>
        </PersonContainer>
        <DialogContainer>
          <RespondContainer>
            <AnswerBox>
              {isLoading && (
                <div style={{ display: "flex", justifyContent: "center" }}>
                  <ColorRing
                    visible={true}
                    height="35"
                    width="35"
                    ariaLabel="color-ring-loading"
                    colors={[
                      "#f82d98",
                      "#f82d98",
                      "#F82D98",
                      "#5833ef",
                      "#5833ef",
                    ]}
                  />
                </div>
              )}
              {!isDialogStarted &&
                questionVisible &&
                !!individual?.questionText && (
                  <Question
                    $isVisible={questionVisible && !!individual?.questionText}
                    onClick={handleQuestionClick}
                  >
                    <Text>{individual?.questionText}</Text>
                  </Question>
                )}
              {showResponses &&
                filteredResponses.length > 0 &&
                filteredResponses.map((resp: any, index: number) => (
                  <Respond key={index}>
                    <IconBox>
                      <Icon src={resp?.smallImage || profile} />
                    </IconBox>
                    <RespondBox>
                      <TextRespond>
                        {resp?.text || "No response available"}
                      </TextRespond>
                      <Social>
                        <IconSocial
                          src={share}
                          onClick={() =>
                            handleShare(resp?.text, resp?.individualId)
                          }
                        />
                      </Social>
                    </RespondBox>
                  </Respond>
                ))}
              <div ref={answerBoxRef} />
            </AnswerBox>
          </RespondContainer>
          <QuestionContainer>
            <PersonAnswer>
              <Text>{currentResponse || <LoadingDots />}</Text>
            </PersonAnswer>
          </QuestionContainer>
          <InputBox>
            <InputWrapper isGrowing={isGrowing} onClick={handleInputClick}>
              <Input
                as="textarea"
                placeholder="Enter your message..."
                style={{ pointerEvents: isAuthenticated ? "auto" : "none" }}
                value={message}
                onChange={handleInputChange}
                onFocus={handleInputFocus}
                rows={1}
                isGrowing={isGrowing}
              />
            </InputWrapper>
            <Button disabled={!isAuthenticated}>SUBMIT</Button>
          </InputBox>
        </DialogContainer>
      </ChatContainer>
    </>
  );
};

export default Chat;
